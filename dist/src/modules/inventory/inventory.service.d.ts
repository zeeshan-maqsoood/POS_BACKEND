export declare const inventoryCategoryService: {
    create(data: any, user?: any): Promise<{
        items: {
            id: string;
            name: string;
            status: import(".prisma/client").$Enums.InventoryStatus;
            createdAt: Date;
            updatedAt: Date;
            supplier: string;
            description: string | null;
            branchName: string | null;
            cost: number;
            categoryId: string;
            quantity: number;
            unit: string;
            subcategoryId: string | null;
            minStock: number;
            maxStock: number;
            location: string;
            expiryDate: Date | null;
            lastUpdated: Date;
        }[];
        subcategories: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            isActive: boolean;
            branchName: string | null;
            categoryId: string;
        }[];
    } & {
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        branchName: string | null;
        color: string;
    }>;
    list(user?: any, queryParams?: any): Promise<{
        itemCount: number;
        subcategories: {
            itemCount: number;
            _count: {
                items: number;
            };
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            isActive: boolean;
            branchName: string | null;
            categoryId: string;
        }[];
        _count: {
            items: number;
        };
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        branchName: string | null;
        color: string;
    }[]>;
    get(id: string, user?: any): Promise<{
        itemCount: number;
        subcategories: {
            itemCount: number;
            _count: {
                items: number;
            };
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            isActive: boolean;
            branchName: string | null;
            categoryId: string;
        }[];
        _count: {
            items: number;
        };
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        branchName: string | null;
        color: string;
    } | null>;
    update(id: string, data: any, user?: any): Promise<{
        _count: {
            items: number;
        };
        subcategories: ({
            _count: {
                items: number;
            };
        } & {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            isActive: boolean;
            branchName: string | null;
            categoryId: string;
        })[];
    } & {
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        branchName: string | null;
        color: string;
    }>;
    remove(id: string, user?: any): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        branchName: string | null;
        color: string;
    }>;
};
export declare const inventorySubcategoryService: {
    create(data: any, user?: any): Promise<{
        _count: {
            items: number;
        };
        category: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            isActive: boolean;
            branchName: string | null;
            color: string;
        };
    } & {
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        branchName: string | null;
        categoryId: string;
    }>;
    list(user?: any, queryParams?: any): Promise<{
        itemCount: number;
        _count: {
            items: number;
        };
        category: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            isActive: boolean;
            branchName: string | null;
            color: string;
        };
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        branchName: string | null;
        categoryId: string;
    }[]>;
    get(id: string, user?: any): Promise<{
        itemCount: number;
        _count: {
            items: number;
        };
        category: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            isActive: boolean;
            branchName: string | null;
            color: string;
        };
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        branchName: string | null;
        categoryId: string;
    } | null>;
    update(id: string, data: any, user?: any): Promise<{
        _count: {
            items: number;
        };
        category: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            isActive: boolean;
            branchName: string | null;
            color: string;
        };
    } & {
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        branchName: string | null;
        categoryId: string;
    }>;
    remove(id: string, user?: any): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        description: string | null;
        isActive: boolean;
        branchName: string | null;
        categoryId: string;
    }>;
};
export declare const inventoryItemService: {
    create(data: any, user?: any): Promise<{
        category: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            isActive: boolean;
            branchName: string | null;
            color: string;
        };
        subcategory: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            isActive: boolean;
            branchName: string | null;
            categoryId: string;
        } | null;
    } & {
        id: string;
        name: string;
        status: import(".prisma/client").$Enums.InventoryStatus;
        createdAt: Date;
        updatedAt: Date;
        supplier: string;
        description: string | null;
        branchName: string | null;
        cost: number;
        categoryId: string;
        quantity: number;
        unit: string;
        subcategoryId: string | null;
        minStock: number;
        maxStock: number;
        location: string;
        expiryDate: Date | null;
        lastUpdated: Date;
    }>;
    list(user?: any, queryParams?: any): Promise<({
        category: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            isActive: boolean;
            branchName: string | null;
            color: string;
        };
        subcategory: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            isActive: boolean;
            branchName: string | null;
            categoryId: string;
        } | null;
    } & {
        id: string;
        name: string;
        status: import(".prisma/client").$Enums.InventoryStatus;
        createdAt: Date;
        updatedAt: Date;
        supplier: string;
        description: string | null;
        branchName: string | null;
        cost: number;
        categoryId: string;
        quantity: number;
        unit: string;
        subcategoryId: string | null;
        minStock: number;
        maxStock: number;
        location: string;
        expiryDate: Date | null;
        lastUpdated: Date;
    })[]>;
    get(id: string, user?: any): Promise<({
        category: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            isActive: boolean;
            branchName: string | null;
            color: string;
        };
        subcategory: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            isActive: boolean;
            branchName: string | null;
            categoryId: string;
        } | null;
    } & {
        id: string;
        name: string;
        status: import(".prisma/client").$Enums.InventoryStatus;
        createdAt: Date;
        updatedAt: Date;
        supplier: string;
        description: string | null;
        branchName: string | null;
        cost: number;
        categoryId: string;
        quantity: number;
        unit: string;
        subcategoryId: string | null;
        minStock: number;
        maxStock: number;
        location: string;
        expiryDate: Date | null;
        lastUpdated: Date;
    }) | null>;
    update(id: string, data: any, user?: any): Promise<{
        category: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            isActive: boolean;
            branchName: string | null;
            color: string;
        };
        subcategory: {
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            description: string | null;
            isActive: boolean;
            branchName: string | null;
            categoryId: string;
        } | null;
    } & {
        id: string;
        name: string;
        status: import(".prisma/client").$Enums.InventoryStatus;
        createdAt: Date;
        updatedAt: Date;
        supplier: string;
        description: string | null;
        branchName: string | null;
        cost: number;
        categoryId: string;
        quantity: number;
        unit: string;
        subcategoryId: string | null;
        minStock: number;
        maxStock: number;
        location: string;
        expiryDate: Date | null;
        lastUpdated: Date;
    }>;
    remove(id: string, user?: any): Promise<{
        id: string;
        name: string;
        status: import(".prisma/client").$Enums.InventoryStatus;
        createdAt: Date;
        updatedAt: Date;
        supplier: string;
        description: string | null;
        branchName: string | null;
        cost: number;
        categoryId: string;
        quantity: number;
        unit: string;
        subcategoryId: string | null;
        minStock: number;
        maxStock: number;
        location: string;
        expiryDate: Date | null;
        lastUpdated: Date;
    }>;
};
export declare const supplierService: {
    create(data: any, user?: any): Promise<{
        createdBy: {
            email: string;
            id: string;
            name: string | null;
        };
        purchaseOrders: {
            id: string;
            status: import(".prisma/client").$Enums.PurchaseOrderStatus;
            createdAt: Date;
            updatedAt: Date;
            createdById: string;
            taxRate: number;
            branchName: string | null;
            subtotal: number;
            discount: number;
            notes: string | null;
            paymentTerms: import(".prisma/client").$Enums.PaymentTerm;
            poNumber: string;
            supplierId: string;
            orderDate: Date;
            expectedDate: Date | null;
            deliveryDate: Date | null;
            deliveryMethod: import(".prisma/client").$Enums.DeliveryMethod | null;
            shippingAddress: string | null;
            taxAmount: number;
            shippingCost: number;
            totalAmount: number;
            termsConditions: string | null;
        }[];
        contacts: {
            email: string | null;
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            notes: string | null;
            phone: string | null;
            mobile: string | null;
            supplierId: string;
            position: string | null;
            isPrimary: boolean;
            department: string | null;
        }[];
        products: ({
            inventoryItem: {
                id: string;
                name: string;
                status: import(".prisma/client").$Enums.InventoryStatus;
                createdAt: Date;
                updatedAt: Date;
                supplier: string;
                description: string | null;
                branchName: string | null;
                cost: number;
                categoryId: string;
                quantity: number;
                unit: string;
                subcategoryId: string | null;
                minStock: number;
                maxStock: number;
                location: string;
                expiryDate: Date | null;
                lastUpdated: Date;
            };
        } & {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isActive: boolean;
            inventoryItemId: string;
            notes: string | null;
            supplierId: string;
            supplierCode: string | null;
            supplierName: string | null;
            unitPrice: number;
            minOrderQuantity: number | null;
            packSize: string | null;
            leadTime: number | null;
            previousPrice: number | null;
            priceLastUpdated: Date | null;
        })[];
    } & {
        email: string | null;
        id: string;
        name: string;
        status: import(".prisma/client").$Enums.SupplierStatus;
        createdAt: Date;
        updatedAt: Date;
        createdById: string;
        description: string | null;
        notes: string | null;
        currency: string;
        code: string;
        legalName: string | null;
        taxNumber: string | null;
        registrationNumber: string | null;
        phone: string | null;
        mobile: string | null;
        website: string | null;
        address: string | null;
        city: string | null;
        state: string | null;
        country: string;
        postalCode: string | null;
        businessType: string | null;
        industry: string | null;
        establishedYear: number | null;
        employeeCount: number | null;
        rating: import(".prisma/client").$Enums.SupplierRating | null;
        creditLimit: number | null;
        paymentTerms: import(".prisma/client").$Enums.PaymentTerm;
        bankName: string | null;
        bankAccount: string | null;
        bankRouting: string | null;
    }>;
    list(user?: any, queryParams?: any): Promise<{
        purchaseOrderCount: number;
        productCount: number;
        purchaseOrders: {
            id: string;
            status: import(".prisma/client").$Enums.PurchaseOrderStatus;
            createdAt: Date;
            updatedAt: Date;
            createdById: string;
            taxRate: number;
            branchName: string | null;
            subtotal: number;
            discount: number;
            notes: string | null;
            paymentTerms: import(".prisma/client").$Enums.PaymentTerm;
            poNumber: string;
            supplierId: string;
            orderDate: Date;
            expectedDate: Date | null;
            deliveryDate: Date | null;
            deliveryMethod: import(".prisma/client").$Enums.DeliveryMethod | null;
            shippingAddress: string | null;
            taxAmount: number;
            shippingCost: number;
            totalAmount: number;
            termsConditions: string | null;
        }[];
        _count: {
            purchaseOrders: number;
            products: number;
        };
        contacts: {
            email: string | null;
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            notes: string | null;
            phone: string | null;
            mobile: string | null;
            supplierId: string;
            position: string | null;
            isPrimary: boolean;
            department: string | null;
        }[];
        products: ({
            inventoryItem: {
                id: string;
                name: string;
                status: import(".prisma/client").$Enums.InventoryStatus;
                createdAt: Date;
                updatedAt: Date;
                supplier: string;
                description: string | null;
                branchName: string | null;
                cost: number;
                categoryId: string;
                quantity: number;
                unit: string;
                subcategoryId: string | null;
                minStock: number;
                maxStock: number;
                location: string;
                expiryDate: Date | null;
                lastUpdated: Date;
            };
        } & {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isActive: boolean;
            inventoryItemId: string;
            notes: string | null;
            supplierId: string;
            supplierCode: string | null;
            supplierName: string | null;
            unitPrice: number;
            minOrderQuantity: number | null;
            packSize: string | null;
            leadTime: number | null;
            previousPrice: number | null;
            priceLastUpdated: Date | null;
        })[];
        email: string | null;
        id: string;
        name: string;
        status: import(".prisma/client").$Enums.SupplierStatus;
        createdAt: Date;
        updatedAt: Date;
        createdById: string;
        description: string | null;
        notes: string | null;
        currency: string;
        code: string;
        legalName: string | null;
        taxNumber: string | null;
        registrationNumber: string | null;
        phone: string | null;
        mobile: string | null;
        website: string | null;
        address: string | null;
        city: string | null;
        state: string | null;
        country: string;
        postalCode: string | null;
        businessType: string | null;
        industry: string | null;
        establishedYear: number | null;
        employeeCount: number | null;
        rating: import(".prisma/client").$Enums.SupplierRating | null;
        creditLimit: number | null;
        paymentTerms: import(".prisma/client").$Enums.PaymentTerm;
        bankName: string | null;
        bankAccount: string | null;
        bankRouting: string | null;
    }[]>;
    get(id: string, user?: any): Promise<({
        purchaseOrders: {
            id: string;
            status: import(".prisma/client").$Enums.PurchaseOrderStatus;
            createdAt: Date;
            updatedAt: Date;
            createdById: string;
            taxRate: number;
            branchName: string | null;
            subtotal: number;
            discount: number;
            notes: string | null;
            paymentTerms: import(".prisma/client").$Enums.PaymentTerm;
            poNumber: string;
            supplierId: string;
            orderDate: Date;
            expectedDate: Date | null;
            deliveryDate: Date | null;
            deliveryMethod: import(".prisma/client").$Enums.DeliveryMethod | null;
            shippingAddress: string | null;
            taxAmount: number;
            shippingCost: number;
            totalAmount: number;
            termsConditions: string | null;
        }[];
        contacts: {
            email: string | null;
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            notes: string | null;
            phone: string | null;
            mobile: string | null;
            supplierId: string;
            position: string | null;
            isPrimary: boolean;
            department: string | null;
        }[];
        products: ({
            inventoryItem: {
                id: string;
                name: string;
                status: import(".prisma/client").$Enums.InventoryStatus;
                createdAt: Date;
                updatedAt: Date;
                supplier: string;
                description: string | null;
                branchName: string | null;
                cost: number;
                categoryId: string;
                quantity: number;
                unit: string;
                subcategoryId: string | null;
                minStock: number;
                maxStock: number;
                location: string;
                expiryDate: Date | null;
                lastUpdated: Date;
            };
        } & {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isActive: boolean;
            inventoryItemId: string;
            notes: string | null;
            supplierId: string;
            supplierCode: string | null;
            supplierName: string | null;
            unitPrice: number;
            minOrderQuantity: number | null;
            packSize: string | null;
            leadTime: number | null;
            previousPrice: number | null;
            priceLastUpdated: Date | null;
        })[];
        evaluations: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isActive: boolean;
            supplierId: string;
            evaluationDate: Date;
            evaluatedById: string;
            qualityRating: number;
            deliveryRating: number;
            priceRating: number;
            serviceRating: number;
            communicationRating: number;
            overallRating: number;
            comments: string | null;
            recommendations: string | null;
        }[];
    } & {
        email: string | null;
        id: string;
        name: string;
        status: import(".prisma/client").$Enums.SupplierStatus;
        createdAt: Date;
        updatedAt: Date;
        createdById: string;
        description: string | null;
        notes: string | null;
        currency: string;
        code: string;
        legalName: string | null;
        taxNumber: string | null;
        registrationNumber: string | null;
        phone: string | null;
        mobile: string | null;
        website: string | null;
        address: string | null;
        city: string | null;
        state: string | null;
        country: string;
        postalCode: string | null;
        businessType: string | null;
        industry: string | null;
        establishedYear: number | null;
        employeeCount: number | null;
        rating: import(".prisma/client").$Enums.SupplierRating | null;
        creditLimit: number | null;
        paymentTerms: import(".prisma/client").$Enums.PaymentTerm;
        bankName: string | null;
        bankAccount: string | null;
        bankRouting: string | null;
    }) | null>;
    update(id: string, data: any, user?: any): Promise<{
        purchaseOrders: {
            id: string;
            status: import(".prisma/client").$Enums.PurchaseOrderStatus;
            createdAt: Date;
            updatedAt: Date;
            createdById: string;
            taxRate: number;
            branchName: string | null;
            subtotal: number;
            discount: number;
            notes: string | null;
            paymentTerms: import(".prisma/client").$Enums.PaymentTerm;
            poNumber: string;
            supplierId: string;
            orderDate: Date;
            expectedDate: Date | null;
            deliveryDate: Date | null;
            deliveryMethod: import(".prisma/client").$Enums.DeliveryMethod | null;
            shippingAddress: string | null;
            taxAmount: number;
            shippingCost: number;
            totalAmount: number;
            termsConditions: string | null;
        }[];
        contacts: {
            email: string | null;
            id: string;
            name: string;
            createdAt: Date;
            updatedAt: Date;
            notes: string | null;
            phone: string | null;
            mobile: string | null;
            supplierId: string;
            position: string | null;
            isPrimary: boolean;
            department: string | null;
        }[];
        products: ({
            inventoryItem: {
                id: string;
                name: string;
                status: import(".prisma/client").$Enums.InventoryStatus;
                createdAt: Date;
                updatedAt: Date;
                supplier: string;
                description: string | null;
                branchName: string | null;
                cost: number;
                categoryId: string;
                quantity: number;
                unit: string;
                subcategoryId: string | null;
                minStock: number;
                maxStock: number;
                location: string;
                expiryDate: Date | null;
                lastUpdated: Date;
            };
        } & {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isActive: boolean;
            inventoryItemId: string;
            notes: string | null;
            supplierId: string;
            supplierCode: string | null;
            supplierName: string | null;
            unitPrice: number;
            minOrderQuantity: number | null;
            packSize: string | null;
            leadTime: number | null;
            previousPrice: number | null;
            priceLastUpdated: Date | null;
        })[];
    } & {
        email: string | null;
        id: string;
        name: string;
        status: import(".prisma/client").$Enums.SupplierStatus;
        createdAt: Date;
        updatedAt: Date;
        createdById: string;
        description: string | null;
        notes: string | null;
        currency: string;
        code: string;
        legalName: string | null;
        taxNumber: string | null;
        registrationNumber: string | null;
        phone: string | null;
        mobile: string | null;
        website: string | null;
        address: string | null;
        city: string | null;
        state: string | null;
        country: string;
        postalCode: string | null;
        businessType: string | null;
        industry: string | null;
        establishedYear: number | null;
        employeeCount: number | null;
        rating: import(".prisma/client").$Enums.SupplierRating | null;
        creditLimit: number | null;
        paymentTerms: import(".prisma/client").$Enums.PaymentTerm;
        bankName: string | null;
        bankAccount: string | null;
        bankRouting: string | null;
    }>;
    remove(id: string, user?: any): Promise<{
        email: string | null;
        id: string;
        name: string;
        status: import(".prisma/client").$Enums.SupplierStatus;
        createdAt: Date;
        updatedAt: Date;
        createdById: string;
        description: string | null;
        notes: string | null;
        currency: string;
        code: string;
        legalName: string | null;
        taxNumber: string | null;
        registrationNumber: string | null;
        phone: string | null;
        mobile: string | null;
        website: string | null;
        address: string | null;
        city: string | null;
        state: string | null;
        country: string;
        postalCode: string | null;
        businessType: string | null;
        industry: string | null;
        establishedYear: number | null;
        employeeCount: number | null;
        rating: import(".prisma/client").$Enums.SupplierRating | null;
        creditLimit: number | null;
        paymentTerms: import(".prisma/client").$Enums.PaymentTerm;
        bankName: string | null;
        bankAccount: string | null;
        bankRouting: string | null;
    }>;
    addProductToSupplier(supplierId: string, inventoryItemId: string, supplierProductData: any, user?: any): Promise<{
        supplier: {
            email: string | null;
            id: string;
            name: string;
            status: import(".prisma/client").$Enums.SupplierStatus;
            createdAt: Date;
            updatedAt: Date;
            createdById: string;
            description: string | null;
            notes: string | null;
            currency: string;
            code: string;
            legalName: string | null;
            taxNumber: string | null;
            registrationNumber: string | null;
            phone: string | null;
            mobile: string | null;
            website: string | null;
            address: string | null;
            city: string | null;
            state: string | null;
            country: string;
            postalCode: string | null;
            businessType: string | null;
            industry: string | null;
            establishedYear: number | null;
            employeeCount: number | null;
            rating: import(".prisma/client").$Enums.SupplierRating | null;
            creditLimit: number | null;
            paymentTerms: import(".prisma/client").$Enums.PaymentTerm;
            bankName: string | null;
            bankAccount: string | null;
            bankRouting: string | null;
        };
        inventoryItem: {
            id: string;
            name: string;
            status: import(".prisma/client").$Enums.InventoryStatus;
            createdAt: Date;
            updatedAt: Date;
            supplier: string;
            description: string | null;
            branchName: string | null;
            cost: number;
            categoryId: string;
            quantity: number;
            unit: string;
            subcategoryId: string | null;
            minStock: number;
            maxStock: number;
            location: string;
            expiryDate: Date | null;
            lastUpdated: Date;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        inventoryItemId: string;
        notes: string | null;
        supplierId: string;
        supplierCode: string | null;
        supplierName: string | null;
        unitPrice: number;
        minOrderQuantity: number | null;
        packSize: string | null;
        leadTime: number | null;
        previousPrice: number | null;
        priceLastUpdated: Date | null;
    }>;
    getSupplierProducts(supplierId: string, user?: any): Promise<({
        inventoryItem: {
            id: string;
            name: string;
            status: import(".prisma/client").$Enums.InventoryStatus;
            createdAt: Date;
            updatedAt: Date;
            supplier: string;
            description: string | null;
            branchName: string | null;
            cost: number;
            categoryId: string;
            quantity: number;
            unit: string;
            subcategoryId: string | null;
            minStock: number;
            maxStock: number;
            location: string;
            expiryDate: Date | null;
            lastUpdated: Date;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        inventoryItemId: string;
        notes: string | null;
        supplierId: string;
        supplierCode: string | null;
        supplierName: string | null;
        unitPrice: number;
        minOrderQuantity: number | null;
        packSize: string | null;
        leadTime: number | null;
        previousPrice: number | null;
        priceLastUpdated: Date | null;
    })[]>;
    updateSupplierProduct(supplierProductId: string, data: any, user?: any): Promise<{
        supplier: {
            email: string | null;
            id: string;
            name: string;
            status: import(".prisma/client").$Enums.SupplierStatus;
            createdAt: Date;
            updatedAt: Date;
            createdById: string;
            description: string | null;
            notes: string | null;
            currency: string;
            code: string;
            legalName: string | null;
            taxNumber: string | null;
            registrationNumber: string | null;
            phone: string | null;
            mobile: string | null;
            website: string | null;
            address: string | null;
            city: string | null;
            state: string | null;
            country: string;
            postalCode: string | null;
            businessType: string | null;
            industry: string | null;
            establishedYear: number | null;
            employeeCount: number | null;
            rating: import(".prisma/client").$Enums.SupplierRating | null;
            creditLimit: number | null;
            paymentTerms: import(".prisma/client").$Enums.PaymentTerm;
            bankName: string | null;
            bankAccount: string | null;
            bankRouting: string | null;
        };
        inventoryItem: {
            id: string;
            name: string;
            status: import(".prisma/client").$Enums.InventoryStatus;
            createdAt: Date;
            updatedAt: Date;
            supplier: string;
            description: string | null;
            branchName: string | null;
            cost: number;
            categoryId: string;
            quantity: number;
            unit: string;
            subcategoryId: string | null;
            minStock: number;
            maxStock: number;
            location: string;
            expiryDate: Date | null;
            lastUpdated: Date;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        inventoryItemId: string;
        notes: string | null;
        supplierId: string;
        supplierCode: string | null;
        supplierName: string | null;
        unitPrice: number;
        minOrderQuantity: number | null;
        packSize: string | null;
        leadTime: number | null;
        previousPrice: number | null;
        priceLastUpdated: Date | null;
    }>;
    removeSupplierProduct(supplierProductId: string, user?: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean;
        inventoryItemId: string;
        notes: string | null;
        supplierId: string;
        supplierCode: string | null;
        supplierName: string | null;
        unitPrice: number;
        minOrderQuantity: number | null;
        packSize: string | null;
        leadTime: number | null;
        previousPrice: number | null;
        priceLastUpdated: Date | null;
    }>;
};
