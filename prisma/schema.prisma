generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ===================== ENUMS ===================== */

enum UserRole {
  ADMIN
  MANAGER
  CASHIER
  WAITER
  KITCHEN_STAFF
  CUSTOMER
  SUPPLIER_MANAGER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Permission {
  // User permissions
  USER_CREATE
  USER_READ
  USER_UPDATE
  USER_DELETE
  
  // Manager permissions
  MANAGER_CREATE
  MANAGER_READ
  MANAGER_UPDATE
  
  // Order permissions
  ORDER_CREATE
  ORDER_READ
  ORDER_UPDATE
  ORDER_DELETE

  // POS permissions
  POS_CREATE
  POS_READ
  POS_UPDATE
  POS_DELETE
  
  // Product permissions
  PRODUCT_CREATE
  PRODUCT_READ
  PRODUCT_UPDATE
  PRODUCT_DELETE
  
  // Menu permissions
  MENU_CREATE
  MENU_READ
  MENU_UPDATE
  MENU_DELETE

  // Supplier permissions
  SUPPLIER_CREATE
  SUPPLIER_READ
  SUPPLIER_UPDATE
  SUPPLIER_DELETE

  // Purchase Order permissions
  PURCHASE_ORDER_CREATE
  PURCHASE_ORDER_READ
  PURCHASE_ORDER_UPDATE
  PURCHASE_ORDER_DELETE

  // Inventory permissions
  INVENTORY_CREATE
  INVENTORY_READ
  INVENTORY_UPDATE
  INVENTORY_DELETE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_PICKUP
  COMPLETED
  CANCELLED
}

enum OrderType {
  DINE_IN
  TAKEAWAY
  DELIVERY
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  PARTIALLY_REFUNDED
  FAILED
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE_PAYMENT
  OTHER
}

enum InventoryStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
}

enum SupplierStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  BLACKLISTED
}

enum SupplierRating {
  EXCELLENT
  GOOD
  AVERAGE
  POOR
  VERY_POOR
}

enum PurchaseOrderStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  ORDERED
  PARTIALLY_RECEIVED
  COMPLETED
  CANCELLED
  REJECTED
}

enum PurchaseOrderItemStatus {
  PENDING
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
  BACKORDERED
}

enum ReceivingStatus {
  PENDING
  PARTIAL
  COMPLETED
  CANCELLED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PARTIALLY_PAID
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentTerm {
  NET_15
  NET_30
  NET_45
  NET_60
  DUE_ON_RECEIPT
  ADVANCE
}

enum DeliveryMethod {
  SUPPLIER_DELIVERY
  PICKUP
  THIRD_PARTY
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
enum ShiftStatus {
  ACTIVE
  ENDED
}
/* ===================== MODELS ===================== */

model User {
  id           String          @id @default(uuid())
  email        String          @unique
  password     String
  name         String?
  branch       String?         // Static branch name (e.g., "Downtown", "Uptown", "City Center")
  role         UserRole        @default(CUSTOMER)
  status       UserStatus      @default(ACTIVE)
  createdBy    User?           @relation("CreatedUsers", fields: [createdById], references: [id])
  createdById  String?
  
  // Shift Management (for managers and staff)
  shiftSchedule    Json?           // { MONDAY: { startTime: "09:00", endTime: "17:00" }, TUESDAY: { startTime: "10:00", endTime: "18:00" }, ... }
  isShiftActive    Boolean         @default(true)
  
  createdUsers User[]          @relation("CreatedUsers")
  orders       Order[]         @relation("CreatedOrders")
  permissions  UserPermission[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  
  // Supplier relationships
  createdSuppliers      Supplier[]
  purchaseOrders        PurchaseOrder[]
  purchaseOrderApprovals PurchaseOrderApproval[]
  goodsReceipts         GoodsReceipt[]
  supplierPayments      SupplierPayment[]
  supplierEvaluations   SupplierEvaluation[]
  InventoryTransaction  InventoryTransaction[]

  Shift Shift[]
}

model UserPermission {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  permission  Permission
  createdAt   DateTime    @default(now())
}
model Shift {
  id         String      @id @default(uuid())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  branchName String?     // match the rest of your schema (branchName)
  startTime  DateTime
  endTime    DateTime?
  totalHours Float?
  status     ShiftStatus @default(ACTIVE)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([userId])
  @@index([branchName])
  @@index([status])
}
/* ===================== SUPPLIER MODELS ===================== */

model Supplier {
  id              String           @id @default(uuid())
  code            String           @unique // Supplier code (e.g., SUP001)
  name            String
  legalName       String?          // Legal business name
  description     String?
  taxNumber       String?          // Tax ID/VAT number
  registrationNumber String?       // Business registration number
  
  // Contact Information
  email           String?
  phone           String?
  mobile          String?
  website         String?
  
  // Address Information
  address         String?
  city            String?
  state           String?
  country         String          @default("US")
  postalCode      String?
  
  // Business Information
  businessType    String?         // Manufacturer, Distributor, Wholesaler, etc.
  industry        String?         // Food & Beverage, Packaging, etc.
  establishedYear Int?
  employeeCount   Int?
  
  // Status & Rating
  status          SupplierStatus  @default(ACTIVE)
  rating          SupplierRating? @default(AVERAGE)
  creditLimit     Float?          // Maximum credit limit
  paymentTerms    PaymentTerm     @default(NET_30)
  
  // Financial Information
  bankName        String?
  bankAccount     String?
  bankRouting     String?
  currency        String          @default("USD")
  
  // Relationships
  contacts        SupplierContact[]
  products        SupplierProduct[]
  purchaseOrders  PurchaseOrder[]
  invoices        SupplierInvoice[]
  payments        SupplierPayment[]
  evaluations     SupplierEvaluation[]
  
  // Audit
  createdBy       User            @relation(fields: [createdById], references: [id])
  createdById     String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  notes           String?
  
  @@index([name])
  @@index([status])
  @@index([rating])
  @@index([createdById])
}

model SupplierContact {
  id           String        @id @default(uuid())
  supplier     Supplier      @relation(fields: [supplierId], references: [id])
  supplierId   String
  name         String
  position     String?       // Job title/position
  email        String?
  phone        String?
  mobile       String?
  isPrimary    Boolean       @default(false)
  department   String?       // Sales, Support, Accounting, etc.
  notes        String?
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  @@index([supplierId])
  @@index([isPrimary])
}

model SupplierProduct {
  id               String          @id @default(uuid())
  supplier         Supplier        @relation(fields: [supplierId], references: [id])
  supplierId       String
  inventoryItem    InventoryItem   @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId  String
  
  // Supplier-specific product information
  supplierCode     String?         // Supplier's product code/SKU
  supplierName     String?         // Supplier's product name (if different)
  unitPrice        Float           // Current price from this supplier
  minOrderQuantity Float?          // Minimum order quantity
  packSize         String?         // Packaging size/unit
  leadTime         Int?            // Lead time in days
  isActive         Boolean         @default(true)
  
  // Price history and negotiations
  previousPrice    Float?
  priceLastUpdated DateTime?
  notes            String?
  
  // Audit
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
  @@unique([supplierId, inventoryItemId])
  @@index([supplierId])
  @@index([inventoryItemId])
  @@index([isActive])
  PurchaseOrderItem PurchaseOrderItem[]
}

model PurchaseOrder {
  id              String                 @id @default(uuid())
  poNumber        String                 @unique // Purchase Order Number (e.g., PO-2024-001)
  supplier        Supplier               @relation(fields: [supplierId], references: [id])
  supplierId      String
  branchName      String?
  
  // Order Details
  status          PurchaseOrderStatus    @default(DRAFT)
  orderDate       DateTime               @default(now())
  expectedDate    DateTime?              // Expected delivery date
  deliveryDate    DateTime?              // Actual delivery date
  deliveryMethod  DeliveryMethod?        @default(SUPPLIER_DELIVERY)
  shippingAddress String?
  
  // Financial Information
  subtotal        Float                  @default(0)
  taxRate         Float                  @default(0)
  taxAmount       Float                  @default(0)
  shippingCost    Float                  @default(0)
  discount        Float                  @default(0)
  totalAmount     Float                  @default(0)
  
  // Terms & Conditions
  paymentTerms    PaymentTerm            @default(NET_30)
  notes           String?
  termsConditions String?                // Custom terms and conditions
  
  // Relationships
  items           PurchaseOrderItem[]
  approvals       PurchaseOrderApproval[]
  goodsReceipts   GoodsReceipt[]
  invoices        SupplierInvoice[]
  
  // Audit
  createdBy       User                   @relation(fields: [createdById], references: [id])
  createdById     String
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  
  @@index([supplierId])
  @@index([status])
  @@index([orderDate])
  @@index([branchName])
  @@index([createdById])
}

model PurchaseOrderItem {
  id               String                  @id @default(uuid())
  purchaseOrder    PurchaseOrder           @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId  String
  supplierProduct  SupplierProduct         @relation(fields: [supplierProductId], references: [id])
  supplierProductId String
  
  // Order Details
  quantity         Float
  unitPrice        Float
  receivedQuantity Float                   @default(0)
  status           PurchaseOrderItemStatus @default(PENDING)
  
  // Calculations
  lineTotal        Float                   @default(0) // quantity * unitPrice
  
  // Additional Information
  expectedDate     DateTime?               // Item-specific expected date
  notes            String?
  
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  
  @@index([purchaseOrderId])
  @@index([supplierProductId])
  @@index([status])
  GoodsReceiptItem GoodsReceiptItem[]
}

model PurchaseOrderApproval {
  id              String            @id @default(uuid())
  purchaseOrder   PurchaseOrder     @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  approvedBy      User              @relation(fields: [approvedById], references: [id])
  approvedById    String
  status          PurchaseOrderStatus
  comments        String?
  approvedAt      DateTime          @default(now())
  
  @@index([purchaseOrderId])
  @@index([approvedById])
}

model GoodsReceipt {
  id              String          @id @default(uuid())
  grNumber        String          @unique // Goods Receipt Number (e.g., GR-2024-001)
  purchaseOrder   PurchaseOrder   @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
  branchName      String?
  
  // Receipt Details
  status          ReceivingStatus @default(PENDING)
  receiptDate     DateTime        @default(now())
  receivedBy      User            @relation(fields: [receivedById], references: [id])
  receivedById    String
  inspectedBy     String?         // Name of person who inspected
  deliveryNote    String?         // Supplier's delivery note number
  vehicleNumber   String?         // Delivery vehicle number
  
  // Relationships
  items           GoodsReceiptItem[]
  inventoryTransactions InventoryTransaction[]
  
  // Audit
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  notes           String?
  
  @@index([purchaseOrderId])
  @@index([receiptDate])
  @@index([branchName])
  @@index([receivedById])
}

model GoodsReceiptItem {
  id                  String              @id @default(uuid())
  goodsReceipt        GoodsReceipt        @relation(fields: [goodsReceiptId], references: [id], onDelete: Cascade)
  goodsReceiptId      String
  purchaseOrderItem   PurchaseOrderItem   @relation(fields: [purchaseOrderItemId], references: [id])
  purchaseOrderItemId String
  
  // Receipt Details
  quantityOrdered     Float
  quantityReceived    Float
  unitPrice           Float
  batchNumber         String?           // Lot/Batch number
  expiryDate          DateTime?         // Expiry date for perishable items
  storageLocation     String?           // Where to store the received items
  
  // Quality Control
  qualityStatus       String?           // PASSED, FAILED, etc.
  qualityNotes        String?
  
  // Calculations
  lineTotal           Float             // quantityReceived * unitPrice
  
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  
  @@index([goodsReceiptId])
  @@index([purchaseOrderItemId])
}

model SupplierInvoice {
  id              String          @id @default(uuid())
  invoiceNumber   String          @unique // Supplier's invoice number
  supplier        Supplier        @relation(fields: [supplierId], references: [id])
  supplierId      String
  purchaseOrder   PurchaseOrder?  @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String?
  
  // Invoice Details
  status          InvoiceStatus   @default(DRAFT)
  issueDate       DateTime
  dueDate         DateTime
  invoiceDate     DateTime        @default(now())
  
  // Financial Information
  subtotal        Float           @default(0)
  taxAmount       Float           @default(0)
  shippingCost    Float           @default(0)
  discount        Float           @default(0)
  totalAmount     Float           @default(0)
  amountPaid      Float           @default(0)
  balanceDue      Float           @default(0)
  
  // Payment Information
  paymentTerms    PaymentTerm     @default(NET_30)
  
  // Relationships
  payments        SupplierPayment[]
  
  // Document Management
  invoiceFile     String?         // Path to uploaded invoice file
  notes           String?
  
  // Audit
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@index([supplierId])
  @@index([purchaseOrderId])
  @@index([status])
  @@index([dueDate])
}

model SupplierPayment {
  id              String          @id @default(uuid())
  paymentNumber   String          @unique // Internal payment number
  supplier        Supplier        @relation(fields: [supplierId], references: [id])
  supplierId      String
  invoice         SupplierInvoice? @relation(fields: [invoiceId], references: [id])
  invoiceId       String?
  
  // Payment Details
  paymentDate     DateTime        @default(now())
  paymentMethod   PaymentMethod
  amount          Float
  referenceNumber String?         // Bank reference/transaction number
  notes           String?
  
  // Audit
  processedBy     User            @relation(fields: [processedById], references: [id])
  processedById   String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@index([supplierId])
  @@index([invoiceId])
  @@index([paymentDate])
  @@index([processedById])
}

model SupplierEvaluation {
  id              String          @id @default(uuid())
  supplier        Supplier        @relation(fields: [supplierId], references: [id])
  supplierId      String
  evaluationDate  DateTime        @default(now())
  evaluatedBy     User            @relation(fields: [evaluatedById], references: [id])
  evaluatedById   String
  
  // Evaluation Criteria (1-5 scale)
  qualityRating   Int             // 1-5
  deliveryRating  Int             // 1-5
  priceRating     Int             // 1-5
  serviceRating   Int             // 1-5
  communicationRating Int         // 1-5
  
  // Overall
  overallRating   Float           // Average of all ratings
  comments        String?
  recommendations String?
  
  // Status
  isActive        Boolean         @default(true)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@index([supplierId])
  @@index([evaluationDate])
  @@index([evaluatedById])
}

/* ===================== EXISTING MODELS (with supplier relationships) ===================== */

model MenuCategory {
  id          String      @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  isActive    Boolean     @default(true)
  menuItems   MenuItem[]
  branchName  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  @@index([branchName])
}

model MenuItem {
  id            String           @id @default(uuid())
  name          String
  description   String?
  imageUrl      String?
  price         Float
  cost          Float?
  taxRate       Float
  taxExempt     Boolean          @default(false)
  isActive      Boolean          @default(true)
  categoryId    String
  category      MenuCategory     @relation(fields: [categoryId], references: [id])
  orderItems    OrderItem[]
  tags          String[]
  modifiers     MenuItemModifier[]
  menuItemIngredients MenuItemIngredient[]
  branchName    String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  @@index([branchName])
}

model MenuItemIngredient {
  id               String          @id @default(uuid())
  menuItemId       String
  menuItem         MenuItem        @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  inventoryItemId  String
  inventoryItem    InventoryItem   @relation(fields: [inventoryItemId], references: [id])
  quantity         Float
  unit             String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@unique([menuItemId, inventoryItemId])
}

model Order {
  id             String         @id @default(uuid())
  orderNumber    String         @unique
  orderType      OrderType      @default(DINE_IN)
  status         OrderStatus    @default(PENDING)
  paymentStatus  PaymentStatus  @default(PENDING)
  paymentMethod  PaymentMethod?
  subtotal       Float
  tax            Float
  discount       Float?         @default(0)
  total          Float
  tableNumber    String?
  customerName   String?
  customerEmail  String?
  customerPhone  String?
  notes          String?
  branchName     String?
  items          OrderItem[]
  payments       Payment[]
  createdBy      User?          @relation("CreatedOrders", fields: [createdById], references: [id])
  createdById    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model OrderItem {
  id          String    @id @default(uuid())
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String
  menuItemId  String?
  name        String
  quantity    Int
  price       Float
  taxRate     Float
  tax         Float
  total       Float
  notes       String?
  modifiers   Json?
  menuItem    MenuItem? @relation(fields: [menuItemId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Payment {
  id            String         @id @default(uuid())
  order         Order          @relation(fields: [orderId], references: [id])
  orderId       String
  method        PaymentMethod
  amount        Float
  status        PaymentStatus  @default(PENDING)
  transactionId String?
  createdAt     DateTime       @default(now())
}

model Modifier {
  id          String        @id @default(uuid())
  name        String
  description String?
  price       Float         @default(0)
  isRequired  Boolean       @default(false)
  isActive    Boolean       @default(true)
  type        String        @default("SINGLE")
  minSelection Int          @default(0)
  maxSelection Int          @default(1)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relationships
  menuItems   MenuItemModifier[]
  modifierIngredients ModifierIngredient[]
  
  @@map("modifiers")
}

model InventoryTransaction {
  id              String   @id @default(cuid())
  inventoryItemId String
  type            TransactionType // INCOMING, OUTGOING, ADJUSTMENT
  quantity        Float
  reason          String
  referenceId     String?  // Order ID, Purchase Order ID, etc.
  referenceType   String?  // ORDER, PURCHASE_ORDER, ADJUSTMENT, etc.
  branchName      String?
  previousQuantity Float
  newQuantity     Float
  createdAt       DateTime @default(now())
  createdById     String?

  // Relations
  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [id])
  createdBy     User?         @relation(fields: [createdById], references: [id])
  goodsReceipt  GoodsReceipt? @relation(fields: [goodsReceiptId], references: [id])
  goodsReceiptId String?

  @@index([inventoryItemId])
  @@index([referenceId, referenceType])
  @@index([createdAt])
  @@index([goodsReceiptId])
}

enum TransactionType {
  INCOMING
  OUTGOING
  ADJUSTMENT
}

model ModifierIngredient {
  id            String    @id @default(uuid())
  modifierId    String
  modifier      Modifier  @relation(fields: [modifierId], references: [id], onDelete: Cascade)
  inventoryItemId String
  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [id])
  quantity      Float
  unit          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([modifierId, inventoryItemId])
}

model ModifierOption {
  id          String    @id @default(uuid())
  name        String
  price       Float     @default(0)
  isDefault   Boolean   @default(false)
  isActive    Boolean   @default(true)
  modifierId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model InventoryCategory {
  id          String               @id @default(uuid())
  name        String
  description String?
  color       String               @default("bg-gray-500")
  isActive    Boolean              @default(true)
  branchName  String?
  subcategories InventorySubcategory[]
  items       InventoryItem[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  
  @@index([branchName])
  @@unique([name, branchName])
}

model InventorySubcategory {
  id          String               @id @default(uuid())
  name        String
  description String?
  categoryId  String
  category    InventoryCategory    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  isActive    Boolean              @default(true)
  branchName  String?
  items       InventoryItem[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  
  @@index([branchName])
  @@index([categoryId])
  @@unique([name, categoryId, branchName])
}

model InventoryItem {
  id             String               @id @default(uuid())
  name           String
  description    String?
  categoryId     String
  category       InventoryCategory    @relation(fields: [categoryId], references: [id])
  subcategoryId  String?
  subcategory    InventorySubcategory? @relation(fields: [subcategoryId], references: [id])
  quantity       Float
  unit           String
  cost           Float                // Keep cost for inventory valuation
  minStock       Float
  maxStock       Float
  supplier       String               // Primary supplier (legacy field, use SupplierProduct for detailed info)
  location       String
  status         InventoryStatus
  branchName     String?
  expiryDate     DateTime?
  lastUpdated    DateTime             @default(now())
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  
  // Relationships
  supplierProducts SupplierProduct[]
  MenuItemIngredient MenuItemIngredient[]
  ModifierIngredient ModifierIngredient[]
  InventoryTransaction InventoryTransaction[]
  
  @@index([branchName])
  @@index([categoryId])
  @@index([subcategoryId])
  @@index([status])
}

model MenuItemModifier {
  id         String    @id @default(uuid())
  menuItem   MenuItem  @relation(fields: [menuItemId], references: [id])
  menuItemId String
  modifier   Modifier  @relation(fields: [modifierId], references: [id])
  modifierId String
}