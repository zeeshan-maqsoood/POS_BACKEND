generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ===================== ENUMS ===================== */

enum UserRole {
  ADMIN
  MANAGER
  CASHIER
  WAITER
  KITCHEN_STAFF
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Permission {
  // User permissions
  USER_CREATE
  USER_READ
  USER_UPDATE
  USER_DELETE
  
  // Manager permissions
  MANAGER_CREATE
  MANAGER_READ
  MANAGER_UPDATE
  
  // Order permissions
  ORDER_CREATE
  ORDER_READ
  ORDER_UPDATE
  ORDER_DELETE

  //POS permissions
  POS_CREATE
  POS_READ
  POS_UPDATE
  POS_DELETE
  
  // Product permissions
  PRODUCT_CREATE
  PRODUCT_READ
  PRODUCT_UPDATE
  PRODUCT_DELETE
  
  // Menu permissions
  MENU_CREATE
  MENU_READ
  MENU_UPDATE
  MENU_DELETE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_PICKUP
  COMPLETED
  CANCELLED
}

enum OrderType {
  DINE_IN
  TAKEAWAY
  DELIVERY
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  PARTIALLY_REFUNDED
  FAILED
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE_PAYMENT
  OTHER
}

/* ===================== MODELS ===================== */

model User {
  id           String          @id @default(uuid())
  email        String          @unique
  password     String
  name         String?
  branch       String?         // Static branch name (e.g., "Downtown", "Uptown", "City Center")
  role         UserRole        @default(CUSTOMER)
  status       UserStatus      @default(ACTIVE)
  createdBy    User?           @relation("CreatedUsers", fields: [createdById], references: [id])
  createdById  String?
  createdUsers User[]          @relation("CreatedUsers")
  orders       Order[]         @relation("CreatedOrders")
  permissions  UserPermission[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  
}

model UserPermission {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  permission  Permission
  createdAt   DateTime    @default(now())
}

model ProductCategory {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProductSupplier {
  id          String    @id @default(uuid())
  name        String    @unique
  contactName String?
  email       String?
  phone       String?
  address     String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String          @id @default(uuid())
  name            String
  category        ProductCategory? @relation(fields: [categoryId], references: [id])
  categoryId      String?
  supplier        ProductSupplier? @relation(fields: [supplierId], references: [id])
  supplierId      String?
  description     String?
  barcode         String?
  tags            String[]
  costPrice       Float
  salePrice       Float
  takeawayPrice   Float?
  retailPrice     Float?
  taxRate         Float
  takeawayTaxRate Float?
  taxExempt       Boolean  @default(false)
  tillOrder       Int      @default(0)
  sellOnTill      Boolean  @default(true)
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model MenuCategory {
  id          String      @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  isActive    Boolean     @default(true)
  menuItems   MenuItem[]
  branchName  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  @@index([branchName])
}

model MenuItem {
  id            String           @id @default(uuid())
  name          String
  description   String?
  imageUrl      String?
  price         Float
  cost          Float?
  taxRate       Float
  taxExempt     Boolean          @default(false)
  isActive      Boolean          @default(true)
  categoryId    String
  category      MenuCategory     @relation(fields: [categoryId], references: [id])
  orderItems    OrderItem[]
  tags          String[]
  modifiers     MenuItemModifier[]
  branchName        String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  @@index([branchName])
}

model Order {
  id             String         @id @default(uuid())
  orderNumber    String         @unique
  orderType      OrderType      @default(DINE_IN)
  status         OrderStatus    @default(PENDING)
  paymentStatus  PaymentStatus  @default(PENDING)
  paymentMethod  PaymentMethod?
  subtotal       Float
  tax            Float
  discount       Float?         @default(0)
  total          Float
  tableNumber    String?
  customerName   String?
  customerEmail  String?
  customerPhone  String?
  notes          String?
  branchName     String?
  items          OrderItem[]
  payments       Payment[]
  createdBy      User?          @relation("CreatedOrders", fields: [createdById], references: [id])
  createdById    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model OrderItem {
  id          String    @id @default(uuid())
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String
  menuItemId  String?
  name        String
  quantity    Int
  price       Float
  taxRate     Float
  tax         Float
  total       Float
  notes       String?
  modifiers   Json?
  menuItem    MenuItem? @relation(fields: [menuItemId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Payment {
  id            String         @id @default(uuid())
  order         Order          @relation(fields: [orderId], references: [id])
  orderId       String
  method        PaymentMethod
  amount        Float
  status        PaymentStatus  @default(PENDING)
  transactionId String?
  createdAt     DateTime       @default(now())
}

model Modifier {
  id            String            @id @default(uuid())
  name          String
  description   String?
  type          String            @default("SINGLE")
  isRequired    Boolean           @default(false)
  isActive      Boolean           @default(true)
  minSelection  Int               @default(0)
  maxSelection  Int               @default(1)
  options       ModifierOption[]
  menuItems     MenuItemModifier[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model ModifierOption {
  id          String    @id @default(uuid())
  name        String
  price       Float     @default(0)
  isDefault   Boolean   @default(false)
  isActive    Boolean   @default(true)
  modifierId  String
  modifier    Modifier  @relation(fields: [modifierId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model MenuItemModifier {
  id         String    @id @default(uuid())
  menuItem   MenuItem  @relation(fields: [menuItemId], references: [id])
  menuItemId String
  modifier   Modifier  @relation(fields: [modifierId], references: [id])
  modifierId String
}